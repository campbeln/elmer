//##################################################
//#
//#           ** DO NOT EDIT THIS FILE **
//#
//##################################################
//# Version: 2023-04-04
'use strict';


const $expressProxy = require('express-http-proxy');


module.exports = function ($elmer) {
    $elmer.app.versionEx = "0.1.2025-03-27";

    //#
    $elmer.extend($elmer.app, {
        cache: {},
        enums: {
            userTypes: {
                admin: 0,
                internal: 1,
                external: 2
            }
        },
        services: {
            web: {
                //#
                configBodyParser: function ($bodyParser, sRoute) {
                    let $bodyParserJson = $bodyParser.json({
                            //type: "*/*",
                            //inflate: true,
                            limit: $elmer.app.config.uploadLimitMb + "mb"
                        }),
                        $bodyParserUrlEncoded = $bodyParser.urlencoded({
                            limit: $elmer.app.config.uploadLimitMb + "mb",
                            extended: true
                        })
                    ;

                    //#
                    if ($elmer.type.str.is(sRoute)) {
                        //# Support json-encoded & url-encoded bodies on the current sRoute only
                        $elmer.app.services.web.server.use(sRoute, $bodyParserJson);
                        $elmer.app.services.web.server.use(sRoute, $bodyParserUrlEncoded);
                    }
                    //#
                    else {
                        //# Support json-encoded & url-encoded bodies
                        $elmer.app.services.web.server.use(sRoute, $bodyParserJson);
                        $elmer.app.services.web.server.use($bodyParserUrlEncoded);
                    }
                }, //# bodyParser

                //# Overload the existing $elmer.app.services.web.router with our baseElmer version
                router: (function() {
                    let a_oRegisteredRoutes = [],
                        fnOrigRegistered = $elmer.app.services.web.router.registered
                    ;

                    return $elmer.extend(
                        function() {
                            let $returnVal = $elmer.app.services.web.express.Router();

                            //# Configure our .router to use CORS
                            $returnVal.use((oRequest, oResponse, fnContinue) => {
                                let sOrigin = oRequest.headers.origin;

                                //console.log("sOrigin: [" + sOrigin + "]", oRequest.headers);

                                //# If the oRequest is from a .corsWhitelist sOrigin we trust, set the CORS header
                                if ($elmer.app.config.security.corsWhitelist.indexOf(sOrigin) > -1) {
                                    oResponse.setHeader('Access-Control-Allow-Origin', sOrigin);
                                }
                                /*else {
                                    oResponse.setHeader('Access-Control-Allow-Origin', '*');
                                }*/
                                //oResponse.setHeader('Access-Control-Allow-Origin', '*');

                                //# Setup the other required headers then fnContinue the oRequest through the proper $route
                                //#     NOTE: CRUD = POST,GET/POST,PUT,DELETE
                                oResponse.setHeader('Access-Control-Allow-Methods', 'GET,POST,PUT,DELETE'); //# PATCH,HEAD,OPTIONS
                                oResponse.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type,Authorization');
                                oResponse.setHeader('Access-Control-Allow-Credentials', true);

                                //# Parse the .querystring and attach it to our oRequest
                                //oRequest.querystring = $elmer.app.services.url.parse(oRequest.url, true).query;
                                oRequest.querystring = $elmer.io.web.queryString.parse(oRequest.url);

                                fnContinue();
                            }); //# CORS

                            return $returnVal;
                        }, //# services.web.router
                        {
                            registered: fnOrigRegistered,

                            register: function(sRoute, vRouterOrURL, oConfig) {
                                let $router, oRoute, sProxyURL, bRemovePrefix, bSecure,
                                    sRemovePrefixFromPath = $elmer.type.str.mk(sRoute),
                                    $httpServer = $elmer.app.services.web.server,
                                    bRouteExists = false
                                ;

                                //#
                                if ($elmer.type.str.is(vRouterOrURL)) {
                                    sProxyURL = $elmer.type.str.mk(vRouterOrURL);
                                    oConfig = $elmer.type.obj.mk(oConfig);
                                }
                                //#
                                else {
                                    $router = vRouterOrURL;

                                    //# .extend and $router passed .elmer oConfig object with any passed oConfig (which implicitly returns an object)
                                    oConfig = $elmer.extend($router.elmer, oConfig);
                                }
                                bRemovePrefix = (sRemovePrefixFromPath !== "");

                                //#
                                if (bRemovePrefix) {
                                    sRemovePrefixFromPath = (sRemovePrefixFromPath[0] === "/" ? "" : "/") + sRemovePrefixFromPath;
                                }

                                //# Set bSecure based on if we have a non-empty oConfig.security .obj
                                bSecure = $elmer.type.obj.is(oConfig.security, true) && $elmer.type.str.is(oConfig.security.mode, true);

                                //#
                                if ($elmer.type.str.is(sRoute)) {
                                    oRoute = $elmer.type.query(a_oRegisteredRoutes, { route: sRoute }, { firstEntryOnly: true, caseInsensitive: true });
                                    bRouteExists = $elmer.type.obj.is(oRoute, true);

                                    //#
                                    if (!bRouteExists) {
                                        //#
                                        if (bSecure) {
                                            //#
                                            //#     NOTE: Due to the bSecure test above, we know that .security.mode .is a .str so it's safe to .trim().toLowerCase() it
                                            switch(oConfig.security.mode.trim().toLowerCase()) {
                                                case "basic": {
                                                    $httpServer.use(
                                                        "/" + sRoute,
                                                        require(__dirname + "/middleware/_basicauth.js")($elmer, oConfig.security)
                                                    );
                                                    break;
                                                }
                                                case "jwt": {
                                                    $httpServer.use(
                                                        "/" + sRoute,
                                                        require(__dirname + "/middleware/_jwt.js")($elmer, oConfig.security)
                                                    );
                                                    break;
                                                }
                                                //# oauth?
                                                //# api key?
                                            }
                                        }

                                        //#
                                        //# https://stackoverflow.com/questions/49017240/express-js-proxy-to-call-web-api
                                        if ($elmer.type.str.mk(sProxyURL)) {
                                            let sURL = "http://" + sProxyURL; // + oRequest.url
                                            sURL = (bRemovePrefix ?
                                                sURL.replace(sRemovePrefixFromPath, "") :
                                                sURL
                                            );
                                            $router = $expressProxy(sURL, {
                                                parseReqBody: false
                                            });
                                        }
                                        $httpServer.use("/" + sRoute, require(__dirname + "/middleware/_cache.js")($elmer, sRoute));
                                        $httpServer.use("/" + sRoute, $router);

                                        //#
                                        oRoute = {
                                            route: sRoute,
                                            secure: bSecure,
                                            config: oConfig,
                                            router: $router
                                            //server:
                                            //port:
                                            //instance:
                                            //id:
                                        };
                                        a_oRegisteredRoutes.push(oRoute);
                                    }
                                }

                                return $elmer.extend({
                                    created: !bRouteExists,
                                    securityMismatch: (oRoute.secure !== bSecure)
                                }, oRoute);
                            } //# router.register
                        }
                    );
                }())
            }
        }
    });

}; //# module.exports
