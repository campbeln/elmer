//##################################################
//#
//#           ** DO NOT EDIT THIS FILE **
//#
//##################################################
//# Version: 2025-03-27
'use strict';


//# Set the .exports to the Elmer route function definition
module.exports = function($elmer, $router /*, $baseRouter */) {
    //# The passed $router is created for you via a call like the one below. Or you can create your own ExpressJS-based $router as required (just be sure to return it below).
    //$router = $elmer.app.services.web.router();


    //# curl -X GET http://localhost:3000/childapi/byid/123 -H 'Content-Type: application/json' -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNuIiwicm9sZSI6MCwiaWF0IjoxNjQwODQ3NzAwLCJleHAiOjE2NDA4NTEzMDB9.pGwQnctoytxpozWJPVlibkwCv1YauWhckKY7HFuHpC4'
    //# curl -X GET http://localhost:3000/childapi/byid/letters -H 'Content-Type: application/json' -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNuIiwicm9sZSI6MCwiaWF0IjoxNjQwODQ3NzAwLCJleHAiOjE2NDA4NTEzMDB9.pGwQnctoytxpozWJPVlibkwCv1YauWhckKY7HFuHpC4'
    //# curl -X GET http://localhost:3000/childapi/byid/123 -H 'Content-Type: application/json'
    //# curl -X GET http://localhost:3000/childapi2/byid/123 -H 'Content-Type: application/json'
    $router.get('/byid/:id', async (oRequest, oResponse) => {
        var iID = $elmer.type.int.mk(oRequest.params.id);

        oResponse.status(200).json({ id: iID, boilerplate: true });
    });


    //# curl -X POST http://localhost:3000/childapi2/byfile -H 'Content-Type: application/json' -d "$(cat /file/path/json.ext)"
    //# curl -X POST http://localhost:3000/childapi2/byfile -F "upload=@/file/path/json.ext" > /file/path/output.json
    $router.post('/byfile', async (oRequest, oResponse) => {
        $elmer.app.services.web.multipartForm(oRequest, async function (oFormData) {
            let oFileContents = JSON.parse(oFormData.files.upload.getContent());

            //..
        } /*, { readFileSync: { encoding: "utf8" } }*/);
    });


    //# curl -X POST http://localhost:3000/childapi2/xlsx -H 'Content-Type: application/json' -d "$(cat /file/path/json.ext)"
    //# curl -X POST http://localhost:3000/childapi2/xlsx -F "upload=@/file/path/sheet.xlsx" > /file/path/output.json
    $router.post('/xlsx', async (oRequest, oResponse) => {
        $elmer.app.services.web.multipartForm(oRequest, async function (oFormData) {
            let oXLSX = $elmer.io.xlsx({ file: oFormData.files.upload.getContent(), options: { type: "binary" } } /*, "Sheet1" */),
                a_oXLSX = $elmer.type.query(
                    $elmer.resolve(oXLSX, ["data", "Sheet1"]),
                    { status: function (x) { return $elmer.type.str.cmp(x, "active"); } }
                )
            ;

            //..
        }, { readFileSync: { encoding: "binary" } });
    });



    //# curl -X GET http://localhost:3000/childapi/delayed -H 'Content-Type: application/json'
    //# curl -X GET http://localhost:3000/elmer/response/7e8ff5bf-6be2-41ef-9fad-8dedbbc4bed8 -H 'Content-Type: application/json'
    $router.get('/delayed', async (oRequest, oResponse) => {
        let oData = { neek: true, arr: [1] },
            oDelayedResponse = await $elmer.io.net.post("http://localhost:3000/elmer/response", { data: oData }, { contentType: "application/json" }),
            fnDelay = function () {
                setTimeout(function() {
                    oData.arr.push(oData.arr.length + 1);
                    $elmer.io.net.post("http://localhost:3000/elmer/response/" + oDelayedResponse.data.id, { data: oData, done: oData.arr.length === 10 }, { contentType: "application/json" })

                    if (oData.arr.length < 10) {
                        fnDelay();
                    }
                }, 5000);
            }
        ;

        //#
        oResponse.status(200).json({
            ok: true,
            id: oDelayedResponse.data.id,
            url: "http://localhost:3000/elmer/response/" + oDelayedResponse.data.id
        });

        //#
        fnDelay();
    });



    //# You can return the $router to be used for this file if it differs from either of the passed $router or $baseRouter (as they are updated by reference)
    //return $router;

    //# If you've registered your own $router, then return false so Elmer knows not to register the passed $router
    //return false;

    //# Register a route without using $elmer.app.services.web.router.register
    //$elmer.app.services.web.router.register("self_registered", $router, {}); //# <= works the same as the following line:
    //$elmer.app.services.web.server.use("/self_registered", require("./elmer.js")($elmer));
}; //# module.exports
