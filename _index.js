//##################################################
//#
//#           ** DO NOT EDIT THIS FILE **
//#
//##################################################
//# Version: 2023-05-14
'use strict';


//##################################################
//# .require the modules
//##################################################
//# .require the Node modules
const $express = require("express"),
    $httpServer = $express(),
    $cookieParser = require('cookie-parser'),
    $bodyParser = require("body-parser"),
    $compression = require('compression'),
    $path = require('path')
;

//# .require ishJS + extensions
//#     TODO: NPM-ify ishJS to require("@ish"), require("@ish/io.net"), etc.?
const $elmer = require("./libs/ish/ish.js");
    require("./libs/ish/ish.type-ex.js")($elmer);
    require("./libs/ish/ish.type.date-format.js")($elmer);
    require("./libs/ish/ish.io.net.js")($elmer);
    require("./libs/ish/ish.io.web.js")($elmer);
    require("./libs/ish/ish.io.csv.js")($elmer);
    require("./libs/ish/ish.oop.inherit.js")($elmer);
    require("./libs/ish/ish.oop.overload.js")($elmer);
    require("./libs/ish/ish.type.enum.js")($elmer);

/*const $elmer =
    require("./libs/ish/ish.type.enum.js")(
    require("./libs/ish/ish.oop.overload.js")(
    require("./libs/ish/ish.oop.inherit.js")(
    require("./libs/ish/ish.io.csv.js")(
    require("./libs/ish/ish.io.web.js")(
    require("./libs/ish/ish.io.net.js")(
    require("./libs/ish/ish.type.date-format.js")(
    require("./libs/ish/ish.type-ex.js")(
    require("./libs/ish/ish.js")
    )))))))));
*/


//##################################################
//# Configure the $elmer app
//##################################################
//# Pull in our .config then setup our $elmer app
require("./app/_app.js")($elmer, $express, $httpServer);
require("./app/app-ex.js")($elmer);
$elmer.app.config = $elmer.extend(
    require("./app/config/base.json"),
    require("./app/config/" + (
        $elmer.type.str.cmp($elmer.app.config.args[0], ["dev", "prod"]) ||
        "prod"
    ) + ".json")
);



//##################################################
//# Configure the $httpServer
//##################################################
//# Support compressed bodies
$httpServer.use($compression({
    filter: (oRequest, oResponse) => {
        return (oRequest.headers['x-no-compression'] ?
            false :
            $compression.filter(oRequest, oResponse)
        );
    },
    threshold: 0
}));

//# If this is not .baseElmer, enable .json and .urlencoded $bodyParser
//#     NOTE: As the $bodyParser consumes the posted body, we must exclude any proxied routes
//#     SEE: https://stackoverflow.com/questions/28371641/how-can-i-use-express-http-proxy-after-bodyparser-json-has-been-called
/* */
if ($elmer.app.config.baseElmer) {
    $elmer.app.services.web.configBodyParser($bodyParser, "/elmer/*");
    $elmer.app.services.web.configBodyParser($bodyParser, "/example/*");
}
else {
    $elmer.app.services.web.configBodyParser($bodyParser);
}
// */
/*
$httpServer.use(function (oRequest, oResponse, fnNext) {
    let sBaseRouteName = $elmer.type.str.mk(oRequest.path).trim().toLowerCase().split("/")[1];

    //#
    if ($elmer.app.data.proxy.disallowed.indexOf(sBaseRouteName) !== -1 || true) {
        //# Support json-encoded bodies
        $bodyParser.json({
            //type: "* /*",
            //inflate: true,
            limit: $elmer.app.config.uploadLimitMb + "mb"
        })(oRequest, oResponse, function () {});

        //# Support url-encoded bodies
        $bodyParser.urlencoded({
            limit: $elmer.app.config.uploadLimitMb + "mb",
            extended: true
        })(oRequest, oResponse, function () {});
    }

    console.log("sBaseRouteName: " + sBaseRouteName + "; " + $elmer.app.data.proxy.disallowed.indexOf(sBaseRouteName), oRequest.body);

    //#
    fnNext();
});
// */
//#
/*else {
    $httpServer.all('*', elmerBodyParser);

    function elmerBodyParser(oRequest, res, next) {
        let sRouteName = $elmer.type.str.mk(oRequest.path).toLowerCase().trim();

        if ($elmer.app.data.proxy.disallowed.indexOf(sRouteName) !== -1) {
            return next();
        }

        //authenticate user
        next();
    }
}*/

//# Support parsing cookies
$httpServer.use($cookieParser());

//# Support X-Request-Id's (or X-Correlation-Id's/X-Trace-Id's)
$httpServer.use(
    require(__dirname + "/app/middleware/_requestid.js")($elmer)
);

//# Setup the /www route for static content
//# curl -X GET http://localhost:3000/www/ from /app/www
//# See: https://expressjs.com/en/starter/static-files.html
$httpServer.use('/www', $express.static($path.join(__dirname, 'app', 'www')));
$httpServer.use('/www/js/ish', $express.static($path.join(__dirname, 'libs', 'ish')));

//# Log each API request
//$httpServer.use("/", require("./app/middleware/logapi.js")($elmer));

//# Spin-up the $httpServer, barfing out the versions to the console as we go
//#     NOTE: Cannot bind to 127.0.0.1 as in Docker the server returns with "curl: (52) Empty reply from server"
$httpServer.listen($elmer.app.config.port, "0.0.0.0", async () => {
    $elmer.app.status = {
        name: $elmer.app.config.name,
        port: $elmer.app.config.port,
        portLocal: $elmer.app.config.portLocal,
        started: $elmer.type.date.format(Date.now(), "YYYY/MM/DD hh:mm:ss"),
        versions: {
            ish: $elmer.config.ish().ver,
            app: $elmer.app.version,
            appEx: $elmer.app.versionEx
        }
    };

    //##################################################
    //# Configure the routes
    //##################################################
    require("./app/routes/_routes.js")($elmer);
    (async function () {
        //# So long as this is not a .baseElmer instance
        if (!$elmer.app.config.baseElmer) {
            //# Setup the .api object (including .register'ing if configured to do so)
            $elmer.app.status.api = {
                heartbeat: ($elmer.resolve(await $elmer.app.services.web.apiUp($elmer.app.config.name), "ok") === true),
                registered: $elmer.type.bool.mk($elmer.resolve(await $elmer.app.services.web.register(), "json.registered"), false),
                dependencies: (
                    $elmer.type.arr.is($elmer.app.config.dependencies, true) ?
                    $elmer.resolve(await $elmer.app.services.web.apiUp($elmer.app.config.dependencies), "ok") === true :
                    null
                )
            };
        }

        //# Output a pretty-ified JSON representation of our .status to standard out
        console.log(JSON.stringify($elmer.app.status, null, 2));
    })();
});
